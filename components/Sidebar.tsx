import React from 'react';
import type { Tab } from '../types';

interface NavItemProps {
    id: Tab;
    icon: string;
    label: string;
    activeTab: Tab;
    onClick: (tab: Tab) => void;
    isCollapsed: boolean;
    badgeCount?: number;
    badgeColor?: 'red' | 'yellow';
}

const NavItem: React.FC<NavItemProps> = ({ id, icon, label, activeTab, onClick, isCollapsed, badgeCount, badgeColor }) => {
    const isActive = activeTab === id;
    const badgeBg = badgeColor === 'red' ? 'bg-red-500' : 'bg-yellow-500';

    return (
        <li>
            <button
                className={`w-full flex items-center p-3 my-1 transition-all duration-200 ease-in-out text-white rounded-lg ${
                    isActive ? 'bg-gradient-to-r from-blue-500 to-blue-600 shadow-lg' : 'hover:bg-slate-700'
                }`}
                onClick={() => onClick(id)}
            >
                <span className="text-2xl w-6 text-center">{icon}</span>
                {!isCollapsed && <span className="ml-4 font-medium text-base flex-1 text-left">{label}</span>}
                {!isCollapsed && badgeCount && badgeCount > 0 ? (
                    <span className={`text-sm font-bold text-white ${badgeBg} rounded-full px-2 py-0.5`}>
                        {badgeCount}
                    </span>
                ) : null}
            </button>
        </li>
    );
};

interface SidebarProps {
    activeTab: Tab;
    setActiveTab: (tab: Tab) => void;
    isCollapsed: boolean;
    setCollapsed: (collapsed: boolean) => void;
    isMobileOpen: boolean;
    setMobileOpen: (open: boolean) => void;
    stats: { pendingRepairs: number, lowStock: number, dueMaintenance: number };
}

const Sidebar: React.FC<SidebarProps> = ({ activeTab, setActiveTab, isCollapsed, setCollapsed, isMobileOpen, setMobileOpen, stats }) => {
    const handleTabClick = (tab: Tab) => {
        setActiveTab(tab);
        setMobileOpen(false);
    };
    
    const navItems = [
        { section: '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°', items: [
            { id: 'dashboard', icon: 'üè†', label: '‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î' },
            { id: 'fleet-kpi', icon: 'üöÄ', label: 'Fleet KPI & Performance' },
            { id: 'kpi-dashboard', icon: 'üéØ', label: '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° KPI' },
        ]},
        { section: '‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á', items: [
            { id: 'form', icon: 'üìù', label: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°' },
            { id: 'list', icon: 'üìä', label: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°', badge: stats.pendingRepairs, badgeColor: 'red' },
            { id: 'technician-view', icon: 'üì±', label: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≤‡∏á' },
            { id: 'history', icon: 'üìú', label: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°' },
            { id: 'vehicle-repair-history', icon: 'üööüìú', label: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ã‡πà‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏Ñ‡∏±‡∏ô' },
        ]},
        { section: '‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô', items: [
            { id: 'preventive-maintenance', icon: 'üõ°Ô∏è', label: '‡πÅ‡∏ú‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á PM', badge: stats.dueMaintenance, badgeColor: 'yellow' },
            { id: 'maintenance', icon: 'üìÖ', label: '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á' },
            { id: 'estimation', icon: '‚è±Ô∏è', label: '‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ì‡πå' },
        ]},
        { section: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞', items: [
            { id: 'vehicles', icon: 'üöö', label: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢' },
            { id: 'daily-checklist', icon: 'üìã', label: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ' },
            { id: 'tire-check', icon: 'üõû', label: '‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≤‡∏á' },
        ]},
        { section: '‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠', items: [
            { id: 'stock', icon: 'üì¶', label: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà', badge: stats.lowStock, badgeColor: 'yellow' },
            { id: 'stock-history', icon: 'üìã', label: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢' },
            { id: 'requisitions', icon: 'üõí', label: '‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠' },
            { id: 'suppliers', icon: 'üè¨', label: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢' },
            { id: 'used-part-buyers', icon: 'ü§ù', label: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠' },
            { id: 'used-part-report', icon: 'üî©', label: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÄ‡∏Å‡πà‡∏≤' },
        ]},
         { section: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', items: [
            { id: 'tool-management', icon: 'üõ†Ô∏è', label: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠' },
        ]},
        { section: '‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£', items: [
            { id: 'technicians', icon: 'üë®‚Äçüîß', label: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏≤‡∏á' },
            { id: 'technicianPerformance', icon: 'üßë‚Äçüìà', label: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ä‡πà‡∏≤‡∏á' },
            { id: 'technicianWorkLog', icon: 'üìñ', label: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏ä‡πà‡∏≤‡∏á' },
        ]},
        { section: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', items: [
            { id: 'reports', icon: 'üìà', label: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥' },
            { id: 'kpi-management', icon: 'üîß', label: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ KPI' },
            { id: 'settings', icon: '‚öôÔ∏è', label: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö' },
        ]},
    ];

    return (
        <>
        <div 
            className={`fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden transition-opacity ${isMobileOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}
            onClick={() => setMobileOpen(false)}
        ></div>
        <aside className={`fixed top-0 left-0 h-full bg-slate-800 text-slate-100 flex flex-col z-40 transition-all duration-300 ease-in-out ${isCollapsed ? 'w-[70px]' : 'w-72'} ${isMobileOpen ? 'translate-x-0' : '-translate-x-full'} lg:translate-x-0`}>
            <div className={`flex items-center p-4 border-b border-slate-700 ${isCollapsed ? 'justify-center' : 'justify-between'}`}>
                <div className="flex items-center space-x-3 overflow-hidden">
                    <span className="text-3xl">üöõ</span>
                    {!isCollapsed && (
                        <div>
                            <h1 className="font-bold text-lg leading-tight">‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á</h1>
                            <p className="text-sm text-slate-400">NEOSIAM LOGISTICS & TRANSPORT</p>
                        </div>
                    )}
                </div>
            </div>
            
            <nav className="flex-1 px-2 py-4 space-y-2 overflow-y-auto">
                {navItems.map(section => (
                    <div key={section.section}>
                         {!isCollapsed && <h2 className="px-3 pt-2 pb-1 text-xs font-bold text-slate-400 uppercase tracking-wider">{section.section}</h2>}
                         <ul>
                            {section.items.map(item => (
                                <NavItem
                                    key={item.id}
                                    id={item.id as Tab}
                                    icon={item.icon}
                                    label={item.label}
                                    activeTab={activeTab}
                                    onClick={handleTabClick}
                                    isCollapsed={isCollapsed}
                                    badgeCount={item.badge}
                                    badgeColor={item.badgeColor as 'red' | 'yellow' | undefined}
                                />
                            ))}
                        </ul>
                    </div>
                ))}
            </nav>

            <div className="p-3 border-t border-slate-700">
                <button
                    onClick={() => setCollapsed(!isCollapsed)}
                    className="w-full hidden lg:flex items-center p-3 hover:bg-slate-700 rounded-lg"
                >
                    <span className="text-xl w-6 text-center transform transition-transform duration-300">{isCollapsed ? '‚û°Ô∏è' : '‚¨ÖÔ∏è'}</span>
                     {!isCollapsed && <span className="ml-4 font-medium text-base">‡∏¢‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π</span>}
                </button>
            </div>
        </aside>
        </>
    );
};

export default Sidebar;
